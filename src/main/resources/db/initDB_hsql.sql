DROP TABLE votes IF EXISTS;
DROP TABLE user_roles IF EXISTS;
DROP TABLE users IF EXISTS;
DROP TABLE meals IF EXISTS;
DROP TABLE menu IF EXISTS;
DROP TABLE restaurants IF EXISTS;

CREATE TABLE users
(
  id          INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) PRIMARY KEY,
  name        VARCHAR(255)   NOT NULL,
  email       VARCHAR(255)   NOT NULL,
  password    VARCHAR(255)   NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx ON USERS (email);

CREATE TABLE user_roles
(
  user_id   INTEGER NOT NULL,
  role      VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
  id    INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) PRIMARY KEY,
  name  VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE menu
(
  id              INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) PRIMARY KEY,
  restaurant_id   INTEGER NOT NULL,
  date            DATE    NOT NULL,
  CONSTRAINT restaurant_date_idx UNIQUE (restaurant_id, date),
  FOREIGN KEY (restaurant_id) REFERENCES RESTAURANTS (id) ON DELETE CASCADE
);

CREATE TABLE meals
(
  id        INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) PRIMARY KEY,
  name      VARCHAR(255) NOT NULL,
  price     INTEGER      NOT NULL,
  menu_id   INTEGER      NOT NULL,
  FOREIGN KEY (menu_id) REFERENCES MENU (id) ON DELETE CASCADE
);

CREATE TABLE votes
(
  id              INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1000) PRIMARY KEY,
  user_id         INTEGER      NOT NULL,
  restaurant_id   INTEGER      NOT NULL,
  date            DATE         NOT NULL,
  CONSTRAINT user_date_idx UNIQUE (user_id, date),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE,
  FOREIGN KEY (restaurant_id) REFERENCES RESTAURANTS (id) ON DELETE CASCADE
);